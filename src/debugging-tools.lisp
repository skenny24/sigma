(in-package :sigma)
; -----------------------------------------------------------
; Debugging tools
; Return an array with copies of all of the messages in the graph.
; There is one cell per node (at node number) with a list of the outgoing messages from that node
; TODO: move to deciding ??
(defun graph-message-array nil
  (let ((ma (make-array (list (length (graph-nodes cg))))))
    (dolist (n (graph-nodes cg))
      (setf (aref ma (node-number n)) (node-outgoing-messages n))
      )
    ma)
  )

; Compare two graph message arrays
; Each element of the array is a list of the outgoing messages (car is node number, cdr is PLM) from the node so numbered
(defun compare-gmas (a1 a2)
  (let ((match t)
        np1 np2 ; Corresponding dotted-list messages from and to same nodes
        a1i a2i ; Lists of messages from node number i in the two arrays
        misses)
    (unless (= (length a1) (length a2))
      (format trace-stream "~&Array lengths differ (~S versus ~S)." (length a1) (length a2))
      )
    (dotimes (i (min (length a1) (length a2)))
      (setq a1i (aref a1 i))
      (setq a2i (aref a2 i))
      (setq misses nil)
      (dolist (np1 a1i)
        (setq np2 (assoc (car np1) a2i))
        (when (or (not np2) (not (plm-e= (cdr np1) (cdr np2))))
          (setq match nil)
          (setq misses (cons (list i (car np1)) misses))
          (format trace-stream "~&~%~S->~S:" i (car np1))
          (format trace-stream "~&   1: ")
          (pplm (cdr np1))
          (format trace-stream "~&   2: ")
          (if np2 (pplm (cdr np2)) (format trace-stream "NIL"))
          )
        )
      (dolist (np2 a2i)
        (setq np1 (assoc (car np2) a1i))
        (when (and (or (not np1) (not (plm-e= (cdr np1) (cdr np2))))
                   (not (member (list i (car np2)) misses :test #'equal))
                   )
          (setq match nil)
          (format trace-stream "~&~S->~S:" i (car np2))
          (format trace-stream "~&    1: ")
          (if np1 (pplm (cdr np1)) (format trace-stream "NIL"))
          (format trace-stream "~&    2: ")
          (pplm (cdr np2))
          )
        )
      )
    match)
  )

; Compare gma lists (assume sorted from first decision to last, which is not how created)
(defun compare-gma-lists (la1 la2)
  (let ((max (min (length la1) (length la2)))
        match)
    (dotimes (i max)
      (format trace-stream "~&Comparing messages from decision ~S" (+ i 1))
      (setq match (compare-gmas (nth i la1) (nth i la2)))
      (unless match
        (format trace-stream "~&~%Failed to match at decision ~S" (+ i 1))
        (return)
        )
      )
    (when match
      (format trace-stream "~&~%Matched through decision ~S" max)
      )
    )
  )

; Recompute a message with lots of tracing
(defun debug-message (node-number1 node-number2 &optional regions)
  (let* ((tc trace-combine)
         (ts trace-summarize)
         (tt trace-transform)
         (ta trace-affine)
         (m (message-from-numbers node-number1 node-number2))
         (n1 (node-from-number node-number1))
         (n2 (node-from-number node-number2))
         (index (if (variable-nodep n1) var-index fact-index))
         )
    (unless m (error "No link from ~S to ~S." (node-name n1) (node-name n2)))
    (when regions
      (setq trace-combine 'region)
      )
    (unless (eq trace-combine 'region)
      (setq trace-combine t)
      )
    (setq trace-summarize t)
    (setq trace-transform t)
    (setq trace-affine t)
;  (trace combine-plms combine-plms-recur integral-plm integral-plm-recur maximize-plm maximize-plm-recur)
    (if (aref (link-contents (message-link m)) index)
        (outgoing-message m nil t)
      (format trace-stream "~&No message from ~S to ~S"
             (node-name n1)
             (node-name n2)
             )
      )
;  (untrace)
    (setq trace-combine tc)
    (setq trace-summarize ts)
    (setq trace-transform tt)
    (setq trace-affine ta)
    )
  )

; When debug-message errors out, can use this function to turn off all traces it set
(defun undo-debug-traces nil
  (setq trace-combine nil)
  (setq trace-summarize nil)
  (setq trace-transform nil)
  (setq trace-affine nil)
  )
